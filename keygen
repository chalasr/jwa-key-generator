#!/usr/bin/env php
<?php

require_once __DIR__.'/vendor/autoload.php';

use RCH\Keygen\Command\GenerateKeysCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\DependencyInjection\ContainerBuilder;
use Symfony\Component\DependencyInjection\Reference;

// Thanks to @gnugat https://gnugat.github.io/2014/01/29/sf2-di-component-by-example.html
$app = new Application('rch/keygen', '0.0.1');
$container = new ContainerBuilder();
$genDir = __DIR__.'/generated';

$container->setParameter('rch.keygen.private_key_path', $genDir.'/private.pem');
$container->setParameter('rch.keygen.public_key_path', $genDir.'/public.pem');
$container->setParameter('rch.keygen.private_key_bits', 2048);
$container->setParameter('private_key_type', 'RSA');
$container->setParameter('rch.keygen.passphrase', 'foobar');
$container->setParameter('rch.keygen.encryption_engine', 'seclib');

// OpenSSL Generator
$container
    ->register('rch.keygen.generator.openssl', 'RCH\Keygen\Generator\OpenSSLGenerator')
    ->addArgument('%rch.keygen.private_key_path%')
    ->addArgument('%rch.keygen.public_key_path%')
    ->addArgument('%rch.keygen.private_key_bits%')
    ->addArgument('%private_key_type%')
    ->addArgument('%rch.keygen.passphrase%');

// PhpSecLib Generator
$container
    ->register('rch.keygen.generator.seclib', 'RCH\Keygen\Generator\SecLibGenerator')
    ->addArgument('%rch.keygen.private_key_path%')
    ->addArgument('%rch.keygen.public_key_path%')
    ->addArgument('%rch.keygen.private_key_bits%')
    ->addArgument('%rch.keygen.passphrase%');

$encryptionEngine = $container->getParameter('rch.keygen.encryption_engine');

if (!in_array($encryptionEngine, ['openssl', 'seclib'])) {
    throw new \InvalidArgumentException(
        sprintf('The encryption engine "%s" is not supported. Please use one of the available ("openssl" or "seclib")', $encryptionEngine)
    );
}

// Generator alias corresponding to the chosen encryption engine.
$container->setAlias('rch.keygen.generator', 'rch.keygen.generator.'.$encryptionEngine);

// Keys generation command
$container
    ->register('rch.keygen.command.generate_keys', 'RCH\Keygen\Command\GenerateKeysCommand')
    ->addArgument(new Reference('rch.keygen.generator'))
    ->addTag('console.command');

$app->add($container->get('rch.keygen.command.generate_keys'));
$app->run();
